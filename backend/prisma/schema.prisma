generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  role             UserRole          @default(USER)
  isActive         Boolean           @default(true)
  isVerified       Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  dateOfBirth      DateTime?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  country          String?           @default("Nigeria")
  employmentStatus EmploymentStatus?
  employerName     String?
  monthlyIncome    Decimal?          @db.Decimal(10, 2)
  documents        Document[]
  loans            Loan[]
  notifications    Notification[]
  virtualAccount   VirtualAccount?

  @@map("users")
}

model Document {
  id         String       @id @default(cuid())
  userId     String
  type       DocumentType
  fileName   String
  fileUrl    String
  isVerified Boolean      @default(false)
  verifiedAt DateTime?
  verifiedBy String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Loan {
  id              String     @id @default(cuid())
  userId          String
  amount          Decimal    @db.Decimal(10, 2)
  purpose         String
  term            Int
  interestRate    Decimal    @db.Decimal(5, 4)
  monthlyPayment  Decimal    @db.Decimal(10, 2)
  totalAmount     Decimal    @db.Decimal(10, 2)
  status          LoanStatus @default(PENDING)
  score           Int?
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  disbursedAt     DateTime?
  dueDate         DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]

  @@map("loans")
}

model Payment {
  id          String        @id @default(cuid())
  loanId      String
  amount      Decimal       @db.Decimal(10, 2)
  type        PaymentType
  status      PaymentStatus @default(PENDING)
  reference   String        @unique
  gateway     String?
  gatewayRef  String?
  processedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  loan        Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model VirtualAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  accountNumber String   @unique
  bankName      String   @default("QuickFund Bank")
  balance       Decimal  @default(0) @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("virtual_accounts")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      AdminRole @default(ADMIN)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("admins")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

enum UserRole {
  USER
  ADMIN
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum EmploymentStatus {
  EMPLOYED
  SELF_EMPLOYED
  UNEMPLOYED
  STUDENT
  RETIRED
}

enum DocumentType {
  ID_CARD
  UTILITY_BILL
  BANK_STATEMENT
  PAYSLIP
  EMPLOYMENT_LETTER
  OTHER
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  ACTIVE
  COMPLETED
  DEFAULTED
}

enum PaymentType {
  LOAN_REPAYMENT
  LATE_FEE
  PROCESSING_FEE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum NotificationType {
  LOAN_APPROVED
  LOAN_REJECTED
  PAYMENT_DUE
  PAYMENT_RECEIVED
  LOAN_DISBURSED
  SYSTEM_ALERT
}
